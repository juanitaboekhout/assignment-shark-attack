import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%load_ext google.colab.data_table

#attack_df = pd.read_csv('/attacks.csv', encoding = 'cp1252')
attack_df = pd.read_csv('/content/attacks.csv', encoding = 'cp1252')
attack_df.head()

attack_df.columns

attack_df = attack_df.drop(columns = ['Case Number', 'Country', 'Name', 'pdf', 'href formula', 'href','Case Number.1', 'Case Number.2', 'original order', 'Area', 'Location', 'Time', 'Unnamed: 22', 'Unnamed: 23', 'Investigator or Source'])
attack_df.head()

#1Welk type haaien vallen het meeste aan?

attack_df = attack_df.rename(columns={'Species ':'Species'})
species_attack = attack_df.groupby('Species')['Species'].count().sort_values(ascending=False)[0:15]

fig, ax = plt.subplots()
ax.barh(species_attack.index, species_attack.values)
plt.title('species that attack the most')
plt.xlabel('attack count')
plt.ylabel('species')
plt.show()

#conclusie: witte haaien vallen het meeste aan

attack_df['Age'].unique()

# 2) Worden kinderen eerder aangevallen door haaien
age_df = attack_df['Age'].copy()
age_df

age_df.describe()

#lege waarden bekijken 
age_df.isnull().values.any()

#Drop lege rijen
age_df.dropna(inplace = True)
age_df

age_df.value_counts()

#string converteren naar int
#age_df = age_df.astype({"Age": int})

def extract_ages(age):
    try:
        age = int(age)
        return int(age)
    except ValueError:
        if age == '2 to 3 months':
            return 0
        if age == '18 months':
            return 1  
        elif age == "teen":
            return 12
        elif age == "young":
            return 16
        elif age == '20s':
            return 25
        elif age == '30s':
            return 35
        elif age == 'mid-30s':
            return 35
        elif age == '36 & 26':
            return 26 
        elif age == '50s':
            return 55   
        elif age == 'middle-age':
            return 60
        elif age == 'elderly':
            return 80  
        else: 
            return np.nan        
    return int(age)

print(age_df)
age_df = age_df.apply(extract_ages)
age_df

age_df.dropna(how="all")

sum(age_df < 18)    
sum(age_df > 18)   

#percentage aanvallen kinderen tov alle leeftijden
perc_child = ((age_df <18).sum() / age_df.shape[0]) * 100
perc_child

perc_adult = ((age_df >18).sum() / age_df.shape[0]) * 100
perc_adult

#Conclusie vraag 2:
#Percentage kinderen (<18 jaar) t.o.v. het geheel van alle personen + en -18 jaar is 26,33%. Dus kinderen worden niet meer aangevallen dan volwassenen.

#Grafiek
fig, ax = plt.subplots()
perc_child = ((age_df <18).sum() / age_df.shape[0]) * 100
perc_adult = ((age_df >18).sum() / age_df.shape[0]) * 100
ax.bar([0, 1], [perc_child, perc_adult], color=["green", "red"])     
plt.xticks([0, 1], ["<18", ">=18"])                  
plt.title('shark attacks children')
plt.xlabel('age')
plt.ylabel('percentage')
plt.show() 

#3) Zijn aanvallen wanneer deze uitgedaagd zijn gevaarlijker
attack_df['Type'].unique()

attack_df['Type'].value_counts()

attack_df['Fatal (Y/N)'].unique()

#twee dataframes maken
prov_attacks = attack_df[attack_df.Type == 'Provoked']
unprov_attacks = attack_df[attack_df.Type == 'Unprovoked']

prov_attacks.head()
print(len(prov_attacks))

unprov_attacks.head()
print(len(unprov_attacks))

provfatal = prov_attacks[prov_attacks['Fatal (Y/N)'].str.contains("Y|y") == True]
provfatal

#provtafal = 19

provnonfatal = prov_attacks[prov_attacks['Fatal (Y/N)'].str.contains("N") == True]
provnonfatal

#provnonfatal=551

#dangerous_attacks[dangerous_attacks['Fatal (Y/N)'].str.contains("Y|y") == True]
#['Fatal (Y/N)'].str.contains("Y|y") == True]
#provfatal = prov_attacks[prov_attacks['Fatal (Y/N)'].str.contains("Y|y") == True]
#provfatal = len(prov_attacks[prov_attacks["Fatal (Y/N)"] == "Y/y"])
#provnotfatal = len(prov_attacks[prov_attacks["Fatal (Y/N)"] == "N/ N"])
#unprovfatal = len(unprov_attacks[unprov_attacks["Fatal (Y/N)"] == "Y/y"])
#unprovnotfatal = len(unprov_attacks[unprov_attacks["Fatal (Y/N)"] == "N/ N"])

#print(len('provfatal'))
#print(len('provnotfatal'))
#print(len('unprovfatal')) 
#print(len('unprovnotfatal'))

unprovfatal = unprov_attacks[unprov_attacks['Fatal (Y/N)'].str.contains("Y|y") == True]
unprovfatal

#unprovfatal = 1181

unprovnotfatal = unprov_attacks[unprov_attacks['Fatal (Y/N)'].str.contains("N") == True]
unprovnotfatal

#unprovnotfatal = 3408

#percentage provoked
#provfatal = 19
#provnotfatal = 551
perc_prov_fatal = (19 / 551) * 100
perc_prov_fatal  
#3,45% van de provoked attacks = fataal

#percentage unprovoked
perc_unprov_fatal = (1181/3408 *100)
perc_unprov_fatal
#34,65% van de unprovoked attacks = fataal

#Grafiek
fig, ax = plt.subplots()
perc_prov_fatal = (19/551) * 100
perc_unprov_fatal = (1181/3408 *100)
ax.bar([0, 1], [perc_prov_fatal, perc_unprov_fatal], color=["green", "red"])     
plt.xticks([0, 1], ["perc_prov_fatal", "perc_unprov_fatal"])                  
plt.title('Most dangerous attacks')
plt.xlabel('provoked / unprovoked')
plt.ylabel('count attacks')
plt.show() 

#conclusie vraag 3: 
#het percentage provoked en fataal is 3,45%, unprovoked en fataal = 34,65%.
#Er zijn 19+551 = 570 aanvallen provoked
#Er zijn 1181 + 3408 =4589 aanvallen unprovoked dus er zijn meer aanvallen unprovoked dan provoked
#Hiervan = #3,45% van de provoked attacks fataal en 34,65% van de unprovoked attacks fataal. Er zijn dus meer aanvallen die fataal aflopen die niet uitgedaagd zijn.
#Conclusie aanvallen zijn niet gevaarlijker wanneer deze uitgedaagd omdat er minder doden vallen onder deze doelgroep


#4) Leiden bepaalde activiteiten vaker tot aanvallen
attack_df['Activity'].value_counts().head()
activity_attack = attack_df.groupby('Activity')['Activity'].count().sort_values(ascending=False)[:15]

fig, ax = plt.subplots(figsize=(20,6))
ax.bar(activity_attack.index, activity_attack.values)
plt.title('activities that lead to shark attacks')
plt.xlabel('activity')
plt.ylabel('attack count')
plt.show()

#conclusie vraag 4: 
#de volgende activiteiten leiden vaker tot aanvallen: 1 = Surfen, 2 = zwemmen 3 = vissen.

